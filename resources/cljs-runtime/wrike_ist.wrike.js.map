{"version":3,"sources":["wrike_ist/wrike.cljs"],"mappings":";AAGA,8BAAA,9BAAOA;AAAP,AAAA;;AAKA,0BAAA,1BAAOC;AAAP,AAAA,kDAAA,2HAAA,qEAAA,xHAEkB,CAAA,UAAe,AAACD;;AAGlC,AAAKE,6BACH,CAAA,SAAA,uEAAA,6BAAA,gBAAA;AAMF,4BAAA,5BAAMC,gEACHC;AADH,AAEE,IAAMC,MAAI,CAAA,4FACK,AAACC,mBAAsBF;AADtC,AAEE,oDAAA,WAAAG,/DACC,wBAAA,xBAACC;AADF,AAEE,OAACC,YAAe,AAAA,oFAAAF;;;AAClB,OACC,4BAAA,2CAAA,vEAACC,wBAASH,0GAAc,AAACJ,wCACzB,WAAKS;AAAL,AACE,IAAMC,OAAK,AAACC,mDAAQ,AAACC,WAAc,AAAA,oFAAOH;AAA1C,AACE,IAAAI,qBAAc,oDAAA,mFAAA,OAAA,9IAACE,+CAAOL;AAAtB,AAAA,oBAAAG;AAAA,WAAAA,PAASC;AAAT,AACE,AACE,AAACE,yGAAQF;;AACT,OAACG,gBAAmBH;;AACtB,OAACI,eAAkB,KAAAC,MAAA;;;;AAE9B,0BAAA,kCAAAC,5DAAMI;AAAN,AAAA,IAAAH,YAAAD;IAAAC,gBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,cAAA,nEACWI;gBADX,AAAAF,4CAAAF,cAAA,tEACkBlB;AADlB,AAEE,OACC,AAACD,0BAAUC,gBACX,WAAAuB;AAAA,AAAA,IAAAC,YAAAD;IAAAC,gBAAA,AAAAL,4BAAAK;SAAA,AAAAJ,4CAAAI,cAAA,/DAAaC;AAAb,AACE,IAAMxB,MAAI,CAAA,sFAAA,JAA2CwB;AAArD,OACM,4BAAA,2CAAA,vEAACrB,wBAASH,0GAAc,AAACJ,lIACzB,0KAAO,WAAKS,rLASZ,AAKA,PACA;AAfO,AACE,IAAMC,OAAK,AAACC,mDAAQ,AAACC,WAAc,AAAA,oFAAOH;AAA1C,AACE,OAACoB,+CACA,WAAKC,GAAGC;AAAR,AACE,oBAAI,AAAW,oDAAA,pDAACR,4CAAIQ,yBAAgBN;AAClC,OAACO,kBAAQ,eAAA,fAACd;;AACVY;;GACJ,AAACb,kBACD,iDAAA,jDAACM,4CAAIb;SACV;kCAAOuB;AAAP,AACE,IAAMC,SAAO,qBAAA,2CAAA,gJAAA,gEAAA,hRAACC,sHAAe,CAAKlC,uEAAWwB;AAA7C,AAEE,oCAAA,2CAAA,qFAAA,7JAACW,yBAAUhC,0GAAc,AAACJ,gFACJ,AAACqC,eAAkBH;;;IAJtCD;;;;EAAAA;;mCAAAA;;;IAAAA;yBAAAA;;;;;OAKd;AAAA,AAAQ,mBAAA,ZAACzB;UACT,WAAA8B;AAAA,AAAS,GAAI,6CAAAA,gBAAA,7DAACC;AACH,mBAAA,ZAAC/B;;AACD,sBAAA8B,fAACpB;;;;;AAEvB,6BAAA,qCAAAsB,lEAAME;AAAN,AAAA,IAAAD,YAAAD;IAAAC,gBAAA,AAAAnB,4BAAAmB;gBAAA,AAAAlB,4CAAAkB,cAAA,tEACWtC;AADX,AAEE,OACC,AAACD,0BAAUC,gBACX,WAAAwC;AAAA,AAAA,IAAAC,YAAAD;IAAAC,gBAAA,AAAAtB,4BAAAsB;SAAA,AAAArB,4CAAAqB,cAAA,/DAAahB;AAAb,AACE,IAAMxB,MAAI,CAAA,kFAA2CwB;IAC/CM,SAAO,qBAAA,2CAAA,0DAAA,1HAACC;AADd,AAEE,mCAAA,2CAAA,qFAAA,5JAACU,wBAASzC,0GAAc,AAACJ,gFACJ,AAACqC,eAAkBH","names":["wrike-ist.wrike/wrike-token","wrike-ist.wrike/headers","wrike-ist.wrike/link-badge","wrike-ist.wrike/find-task","permalink","uri","js/encodeURIComponent","p1__6551#","httpurr.client.node/get","js/console.log","response","body","cljs.core.js__GT_clj","js/JSON.parse","temp__5751__auto__","task","cljs.core.get_in","cljs.core.println","js/Promise.resolve","js/Promise.reject","js/Error","p__6553","map__6554","cljs.core/--destructure-map","cljs.core.get","wrike-ist.wrike/link-pr","pr-url","p__6555","map__6556","id","cljs.core.reduce","ok","comment","cljs.core/reduced","_","params","cljs.core/clj->js","httpurr.client.node/post","js/JSON.stringify","p1__6552#","cljs.core._EQ_","p__6557","map__6558","wrike-ist.wrike/close-task","p__6559","map__6560","httpurr.client.node/put"],"sourcesContent":["(ns wrike-ist.wrike\n  (:require [httpurr.client.node :as http]))\n\n(defn- wrike-token\n  []\n  ; (.trim (.-WRIKE_TOKEN (.-env js/process))))\n  \"eyJ0dCI6InAiLCJhbGciOiJIUzI1NiIsInR2IjoiMSJ9.eyJkIjoie1wiYVwiOjQ2NzUyMzcsXCJpXCI6Nzg5MDIxNCxcImNcIjo0NjI2NTA5LFwidVwiOjEwNjkyNjcyLFwiclwiOlwiVVNcIixcInNcIjpbXCJXXCIsXCJGXCIsXCJJXCIsXCJVXCIsXCJLXCIsXCJDXCIsXCJEXCIsXCJNXCIsXCJBXCIsXCJMXCIsXCJQXCJdLFwielwiOltdLFwidFwiOjB9IiwiaWF0IjoxNjI5NDM5Mjg0fQ.m724W0Opawx80mItg3f5_T0yWykk68FVlgEW0-_zjl4\")\n\n(defn- headers\n  []\n  {:Authorization (str \"bearer \" (wrike-token))\n   :Content-Type \"application/json\"})\n\n(def link-badge\n  (str \"<span \"\n       \"style=\\\"background-color: rgb(255,204,128); color: rgb(25,25,25);\\\" \"\n       \"contenteditable=\\\"false\\\">\"\n       \"Pull request:\"\n       \"</span> \"))\n\n(defn find-task\n  [permalink]\n  (let [uri (str \"https://www.wrike.com/api/v4/tasks?permalink=\"\n                 (js/encodeURIComponent permalink))]\n    (.then\n     (http/get \"https://example.com\")\n     #(js/console.log (:body %)))\n    (.then\n     (http/get uri {:headers (headers)})\n     (fn [response]\n       (let [body (js->clj (js/JSON.parse (:body response)))]\n         (if-let [task (get-in body [\"data\" 0])]\n           (do\n             (println task)\n             (js/Promise.resolve task))\n           (js/Promise.reject (js/Error. \"Task not found\"))))))))\n\n(defn link-pr\n  [{:keys [pr-url permalink]}]\n  (.then\n   (find-task permalink)\n   (fn [{:strs [id]}]\n     (let [uri (str \"https://www.wrike.com/api/v4/tasks/\" id \"/comments\")]\n       (-> (http/get uri {:headers (headers)})\n           (.then (fn [response]\n                    (let [body (js->clj (js/JSON.parse (:body response)))]\n                      (reduce\n                       (fn [ok comment]\n                         (if (.includes (get comment \"text\") pr-url)\n                           (reduced (js/Promise.reject :present))\n                           ok))\n                       (js/Promise.resolve)\n                       (get body \"data\")))))\n           (.then (fn [& _]\n                    (let [params (clj->js {:text (str link-badge pr-url)\n                                           :plainText false})]\n                      (http/post uri {:headers (headers)\n                                      :body (js/JSON.stringify params)}))))\n           (.then #(js/console.log \"PR link sent to task\"))\n           (.catch #(if (= % :present)\n                      (js/console.log \"PR link already in comments\")\n                      (js/Promise.reject %))))))))\n\n(defn close-task\n  [{:keys [permalink]}]\n  (.then\n   (find-task permalink)\n   (fn [{:strs [id]}]\n     (let [uri (str \"https://www.wrike.com/api/v4/tasks/\" id)\n           params (clj->js {:status :completed})]\n       (http/put uri {:headers (headers)\n                      :body (js/JSON.stringify params)})))))\n"]}