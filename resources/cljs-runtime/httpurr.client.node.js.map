{"version":3,"sources":["httpurr/client/node.cljs"],"mappings":"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","names":["httpurr.client.node/http","cljs.nodejs/require","httpurr.client.node/https","httpurr.client.node/url","httpurr.client.node/querystring","httpurr.client.node/url->options","u","qs","qp","parsed","cljs.core.merge","cljs.core/clj->js","cljs.core/PROTOCOL_SENTINEL","this__4461__auto__","writer__4462__auto__","opt__4463__auto__","cljs.core/-write","httpurr.client.node/HttpResponse","httpurr.client.node/->HttpResponse","msg","body","_","headersv","cljs.core.partition","cljs.core.js__GT_clj","cljs.core/zipmap","cljs.core.map","cljs.core/first","cljs.core/second","httpurr.client.node/HttpResponseError","httpurr.client.node/->HttpResponseError","type","err","cljs.core.ex_info","httpurr.client.node/HttpRequest","httpurr.client.node/->HttpRequest","req","callback","target","event","cb","chunks","cljs.core.atom","listen","cljs.core.swap_BANG_","cljs.core/conj","G__8661","js/Buffer","cljs.core/deref","cljs.core.filter","b","G__8663","G__8664","G__8666","on-response","on-timeout","on-client-error","on-error","httpurr.client.node/client","js/httpurr","js/httpurr.client","js/httpurr.client.node","js/httpurr.client.node.t_httpurr$client$node8670","httpurr.client.node/t_httpurr$client$node8670","_8672","meta8671","p__8674","map__8675","cljs.core/--destructure-map","cljs.core.get","httpurr.client.node/->t_httpurr$client$node8670","request","timeout","options","map__8676","method","query-string","query-params","url","headers","urldata","cljs.core.dissoc","httpurr.client/keyword->method","https?","cljs.core._EQ_","httpurr.client.node/send!","cljs.core.partial","httpurr.client/send!","httpurr.client.node/head","httpurr.client/method","httpurr.client.node/options","httpurr.client.node/get","httpurr.client.node/post","httpurr.client.node/put","httpurr.client.node/patch","httpurr.client.node/delete","httpurr.client.node/trace"],"sourcesContent":["(ns httpurr.client.node\n  (:refer-clojure :exclude [get])\n  (:require [cljs.nodejs :as node]\n            [clojure.string :as s]\n            [httpurr.client :as c]\n            [httpurr.protocols :as p]))\n\n(def ^:private http (node/require \"http\"))\n(def ^:private https (node/require \"https\"))\n(def ^:private url (node/require \"url\"))\n(def ^:private querystring (node/require \"querystring\"))\n\n(defn- url->options\n  [u qs qp]\n  (let [parsed (.parse url u)]\n    (merge\n     {:protocol (.-protocol parsed)\n      :host (.-hostname parsed)\n      :port (.-port parsed)\n      :path (.-pathname parsed)\n      :query (.-query parsed)}\n     (when qs {:query qs})\n     (when qp {:query (.stringify querystring (clj->js qp))}))))\n\n(deftype HttpResponse [msg body]\n  p/Response\n  (-success? [_] true)\n  (-response [_]\n    (let [headersv (partition 2 (js->clj (.-rawHeaders msg)))]\n      {:status  (.-statusCode msg)\n       :body    body\n       :headers (zipmap\n                 (map first headersv)\n                 (map second headersv))})))\n\n(deftype HttpResponseError [type err]\n  p/Response\n  (-success? [_] false)\n  (-error [_]\n    (if err\n      (ex-info (.-message err) {:type type :code (.-code err)})\n      (ex-info \"\" {:type type}))))\n\n(deftype HttpRequest [req]\n  p/Request\n  (-listen [_ callback]\n    (letfn [(listen [target event cb]\n              (.on target event cb))\n            (on-response [msg]\n              (let [chunks (atom [])]\n                (listen msg \"readable\" #(swap! chunks conj (.read msg)))\n                (listen msg \"end\" #(callback\n                                     ;concatenating the collected buffers, filtering out empty buffers\n                                     (HttpResponse. msg (.concat js/Buffer (clj->js (filter (fn [b] (not (nil? b))) @chunks))))))))\n            (on-timeout [err]\n              (callback (HttpResponseError. :timeout nil)))\n            (on-client-error [err]\n              (callback (HttpResponseError. :client-error err)))\n            (on-error [err]\n              (callback (HttpResponseError. :exception err)))]\n      (listen req \"response\" on-response)\n      (listen req \"timeout\" on-timeout)\n      (listen req \"clientError\" on-client-error)\n      (listen req \"error\" on-error))))\n\n(def client\n  (reify p/Client\n    (-send [_ request {timeout :timeout :or {timeout 0} :as options}]\n      (let [{:keys [method query-string query-params url headers body]} request\n            urldata (url->options url query-string query-params)\n            options (merge (dissoc urldata :query)\n                           {:headers (if headers (clj->js headers) #js {})\n                            :method (c/keyword->method method)}\n                           (when (:query urldata)\n                             {:path (str (:path urldata) \"?\" (:query urldata))})\n                           (when (:query-string request)\n                             {:path (str (:path urldata) \"?\" (:query-string request))}))\n            https? (= \"https:\" (:protocol options))\n            req (.request (if https? https http) (clj->js options))]\n        (.setTimeout req timeout)\n        (when body (.write req body))\n        (.end req)\n        (HttpRequest. req)))))\n\n(def send! (partial c/send! client))\n(def head (partial (c/method :head) client))\n(def options (partial (c/method :options) client))\n(def get (partial (c/method :get) client))\n(def post (partial (c/method :post) client))\n(def put (partial (c/method :put) client))\n(def patch (partial (c/method :patch) client))\n(def delete (partial (c/method :delete) client))\n(def trace (partial (c/method :trace) client))\n"]}